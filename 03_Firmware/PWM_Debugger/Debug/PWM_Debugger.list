
PWM_Debugger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000325c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003748  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab0  08006ab0  0000801c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ab0  08006ab0  0000801c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ab0  08006ab0  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006ab8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000001c  08006ad4  0000801c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08006ad4  000080cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cac  00000000  00000000  00008045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e2  00000000  00000000  00010cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000126d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017992  00000000  00000000  00013130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c09c  00000000  00000000  0002aac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00087fdc  00000000  00000000  00036b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000beb3a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000007e2  00000000  00000000  000beb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029c4  00000000  00000000  000bf360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c1d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003350 	.word	0x08003350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003350 	.word	0x08003350

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a16      	ldr	r2, [pc, #88]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a10      	ldr	r2, [pc, #64]	@ (80001c0 <MX_GPIO_Init+0x74>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <MX_GPIO_Init+0x74>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000190:	2200      	movs	r2, #0
 8000192:	21fc      	movs	r1, #252	@ 0xfc
 8000194:	480b      	ldr	r0, [pc, #44]	@ (80001c4 <MX_GPIO_Init+0x78>)
 8000196:	f001 fdb3 	bl	8001d00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800019a:	23fc      	movs	r3, #252	@ 0xfc
 800019c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019e:	2301      	movs	r3, #1
 80001a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a2:	2300      	movs	r3, #0
 80001a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a6:	2302      	movs	r3, #2
 80001a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	4804      	ldr	r0, [pc, #16]	@ (80001c4 <MX_GPIO_Init+0x78>)
 80001b2:	f001 fc21 	bl	80019f8 <HAL_GPIO_Init>

}
 80001b6:	bf00      	nop
 80001b8:	3718      	adds	r7, #24
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40021000 	.word	0x40021000
 80001c4:	40010800 	.word	0x40010800

080001c8 <LCD_GPIO_Init>:
      函数说明：LCD初始化IO
      入口数据：无
      返回值：  无
******************************************************************************/
void LCD_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	LCD_SCLK_Set();
 80001cc:	2201      	movs	r2, #1
 80001ce:	2120      	movs	r1, #32
 80001d0:	480e      	ldr	r0, [pc, #56]	@ (800020c <LCD_GPIO_Init+0x44>)
 80001d2:	f001 fd95 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_MOSI_Set();
 80001d6:	2201      	movs	r2, #1
 80001d8:	2180      	movs	r1, #128	@ 0x80
 80001da:	480c      	ldr	r0, [pc, #48]	@ (800020c <LCD_GPIO_Init+0x44>)
 80001dc:	f001 fd90 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_RES_Set();
 80001e0:	2201      	movs	r2, #1
 80001e2:	2140      	movs	r1, #64	@ 0x40
 80001e4:	4809      	ldr	r0, [pc, #36]	@ (800020c <LCD_GPIO_Init+0x44>)
 80001e6:	f001 fd8b 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_DC_Set();
 80001ea:	2201      	movs	r2, #1
 80001ec:	2108      	movs	r1, #8
 80001ee:	4807      	ldr	r0, [pc, #28]	@ (800020c <LCD_GPIO_Init+0x44>)
 80001f0:	f001 fd86 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_CS_Set();
 80001f4:	2201      	movs	r2, #1
 80001f6:	2110      	movs	r1, #16
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <LCD_GPIO_Init+0x44>)
 80001fa:	f001 fd81 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_BLK_Set();
 80001fe:	2201      	movs	r2, #1
 8000200:	2104      	movs	r1, #4
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <LCD_GPIO_Init+0x44>)
 8000204:	f001 fd7c 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010800 	.word	0x40010800

08000210 <LCD_Writ_Bus>:
      函数说明：LCD串行数据写入函数
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
void LCD_Writ_Bus(uint8_t dat)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	LCD_CS_Clr();
 800021a:	2200      	movs	r2, #0
 800021c:	2110      	movs	r1, #16
 800021e:	4818      	ldr	r0, [pc, #96]	@ (8000280 <LCD_Writ_Bus+0x70>)
 8000220:	f001 fd6e 	bl	8001d00 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	e01e      	b.n	8000268 <LCD_Writ_Bus+0x58>
	{
		LCD_SCLK_Clr();
 800022a:	2200      	movs	r2, #0
 800022c:	2120      	movs	r1, #32
 800022e:	4814      	ldr	r0, [pc, #80]	@ (8000280 <LCD_Writ_Bus+0x70>)
 8000230:	f001 fd66 	bl	8001d00 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	da05      	bge.n	8000248 <LCD_Writ_Bus+0x38>
		{
		   LCD_MOSI_Set();
 800023c:	2201      	movs	r2, #1
 800023e:	2180      	movs	r1, #128	@ 0x80
 8000240:	480f      	ldr	r0, [pc, #60]	@ (8000280 <LCD_Writ_Bus+0x70>)
 8000242:	f001 fd5d 	bl	8001d00 <HAL_GPIO_WritePin>
 8000246:	e004      	b.n	8000252 <LCD_Writ_Bus+0x42>
		}
		else
		{
		   LCD_MOSI_Clr();
 8000248:	2200      	movs	r2, #0
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <LCD_Writ_Bus+0x70>)
 800024e:	f001 fd57 	bl	8001d00 <HAL_GPIO_WritePin>
		}
		LCD_SCLK_Set();
 8000252:	2201      	movs	r2, #1
 8000254:	2120      	movs	r1, #32
 8000256:	480a      	ldr	r0, [pc, #40]	@ (8000280 <LCD_Writ_Bus+0x70>)
 8000258:	f001 fd52 	bl	8001d00 <HAL_GPIO_WritePin>
		dat<<=1;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	3301      	adds	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	2b07      	cmp	r3, #7
 800026c:	d9dd      	bls.n	800022a <LCD_Writ_Bus+0x1a>
	}
  LCD_CS_Set();
 800026e:	2201      	movs	r2, #1
 8000270:	2110      	movs	r1, #16
 8000272:	4803      	ldr	r0, [pc, #12]	@ (8000280 <LCD_Writ_Bus+0x70>)
 8000274:	f001 fd44 	bl	8001d00 <HAL_GPIO_WritePin>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40010800 	.word	0x40010800

08000284 <LCD_WR_DATA8>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA8(uint8_t dat)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	LCD_Writ_Bus(dat);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4618      	mov	r0, r3
 8000292:	f7ff ffbd 	bl	8000210 <LCD_Writ_Bus>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA(uint16_t dat)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b082      	sub	sp, #8
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4603      	mov	r3, r0
 80002a6:	80fb      	strh	r3, [r7, #6]
	LCD_Writ_Bus(dat>>8);
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffad 	bl	8000210 <LCD_Writ_Bus>
	LCD_Writ_Bus(dat);
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ffa8 	bl	8000210 <LCD_Writ_Bus>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <LCD_WR_REG>:
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void LCD_WR_REG(uint8_t dat)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_Clr();//写命令
 80002d2:	2200      	movs	r2, #0
 80002d4:	2108      	movs	r1, #8
 80002d6:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <LCD_WR_REG+0x30>)
 80002d8:	f001 fd12 	bl	8001d00 <HAL_GPIO_WritePin>
	LCD_Writ_Bus(dat);
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff96 	bl	8000210 <LCD_Writ_Bus>
	LCD_DC_Set();//写数据
 80002e4:	2201      	movs	r2, #1
 80002e6:	2108      	movs	r1, #8
 80002e8:	4803      	ldr	r0, [pc, #12]	@ (80002f8 <LCD_WR_REG+0x30>)
 80002ea:	f001 fd09 	bl	8001d00 <HAL_GPIO_WritePin>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010800 	.word	0x40010800

080002fc <LCD_Address_Set>:
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4604      	mov	r4, r0
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4623      	mov	r3, r4
 800030c:	80fb      	strh	r3, [r7, #6]
 800030e:	4603      	mov	r3, r0
 8000310:	80bb      	strh	r3, [r7, #4]
 8000312:	460b      	mov	r3, r1
 8000314:	807b      	strh	r3, [r7, #2]
 8000316:	4613      	mov	r3, r2
 8000318:	803b      	strh	r3, [r7, #0]
		LCD_WR_DATA(y2+1);
		LCD_WR_REG(0x2c);//储存器写
	}
	else if(USE_HORIZONTAL==2)
	{
		LCD_WR_REG(0x2a);//列地址设置
 800031a:	202a      	movs	r0, #42	@ 0x2a
 800031c:	f7ff ffd4 	bl	80002c8 <LCD_WR_REG>
		LCD_WR_DATA(x1+1);
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	3301      	adds	r3, #1
 8000324:	b29b      	uxth	r3, r3
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffb9 	bl	800029e <LCD_WR_DATA>
		LCD_WR_DATA(x2+1);
 800032c:	887b      	ldrh	r3, [r7, #2]
 800032e:	3301      	adds	r3, #1
 8000330:	b29b      	uxth	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffb3 	bl	800029e <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 8000338:	202b      	movs	r0, #43	@ 0x2b
 800033a:	f7ff ffc5 	bl	80002c8 <LCD_WR_REG>
		LCD_WR_DATA(y1+26);
 800033e:	88bb      	ldrh	r3, [r7, #4]
 8000340:	331a      	adds	r3, #26
 8000342:	b29b      	uxth	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffaa 	bl	800029e <LCD_WR_DATA>
		LCD_WR_DATA(y2+26);
 800034a:	883b      	ldrh	r3, [r7, #0]
 800034c:	331a      	adds	r3, #26
 800034e:	b29b      	uxth	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ffa4 	bl	800029e <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 8000356:	202c      	movs	r0, #44	@ 0x2c
 8000358:	f7ff ffb6 	bl	80002c8 <LCD_WR_REG>
		LCD_WR_REG(0x2b);//行地址设置
		LCD_WR_DATA(y1+26);
		LCD_WR_DATA(y2+26);
		LCD_WR_REG(0x2c);//储存器写
	}
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bd90      	pop	{r4, r7, pc}

08000364 <LCD_Init>:

void LCD_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	LCD_GPIO_Init();//初始化GPIO
 8000368:	f7ff ff2e 	bl	80001c8 <LCD_GPIO_Init>

	LCD_RES_Clr();//复位
 800036c:	2200      	movs	r2, #0
 800036e:	2140      	movs	r1, #64	@ 0x40
 8000370:	4891      	ldr	r0, [pc, #580]	@ (80005b8 <LCD_Init+0x254>)
 8000372:	f001 fcc5 	bl	8001d00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000376:	2064      	movs	r0, #100	@ 0x64
 8000378:	f001 fa36 	bl	80017e8 <HAL_Delay>
	LCD_RES_Set();
 800037c:	2201      	movs	r2, #1
 800037e:	2140      	movs	r1, #64	@ 0x40
 8000380:	488d      	ldr	r0, [pc, #564]	@ (80005b8 <LCD_Init+0x254>)
 8000382:	f001 fcbd 	bl	8001d00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000386:	2064      	movs	r0, #100	@ 0x64
 8000388:	f001 fa2e 	bl	80017e8 <HAL_Delay>

	LCD_BLK_Set();//打开背光
 800038c:	2201      	movs	r2, #1
 800038e:	2104      	movs	r1, #4
 8000390:	4889      	ldr	r0, [pc, #548]	@ (80005b8 <LCD_Init+0x254>)
 8000392:	f001 fcb5 	bl	8001d00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000396:	2064      	movs	r0, #100	@ 0x64
 8000398:	f001 fa26 	bl	80017e8 <HAL_Delay>

	LCD_WR_REG(0x11);     //Sleep out
 800039c:	2011      	movs	r0, #17
 800039e:	f7ff ff93 	bl	80002c8 <LCD_WR_REG>
	HAL_Delay(120);               //Delay 120ms
 80003a2:	2078      	movs	r0, #120	@ 0x78
 80003a4:	f001 fa20 	bl	80017e8 <HAL_Delay>
	LCD_WR_REG(0xB1);     //Normal mode
 80003a8:	20b1      	movs	r0, #177	@ 0xb1
 80003aa:	f7ff ff8d 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 80003ae:	2005      	movs	r0, #5
 80003b0:	f7ff ff68 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003b4:	203c      	movs	r0, #60	@ 0x3c
 80003b6:	f7ff ff65 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003ba:	203c      	movs	r0, #60	@ 0x3c
 80003bc:	f7ff ff62 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xB2);     //Idle mode
 80003c0:	20b2      	movs	r0, #178	@ 0xb2
 80003c2:	f7ff ff81 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 80003c6:	2005      	movs	r0, #5
 80003c8:	f7ff ff5c 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003cc:	203c      	movs	r0, #60	@ 0x3c
 80003ce:	f7ff ff59 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003d2:	203c      	movs	r0, #60	@ 0x3c
 80003d4:	f7ff ff56 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xB3);     //Partial mode
 80003d8:	20b3      	movs	r0, #179	@ 0xb3
 80003da:	f7ff ff75 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 80003de:	2005      	movs	r0, #5
 80003e0:	f7ff ff50 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003e4:	203c      	movs	r0, #60	@ 0x3c
 80003e6:	f7ff ff4d 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003ea:	203c      	movs	r0, #60	@ 0x3c
 80003ec:	f7ff ff4a 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05);
 80003f0:	2005      	movs	r0, #5
 80003f2:	f7ff ff47 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003f6:	203c      	movs	r0, #60	@ 0x3c
 80003f8:	f7ff ff44 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C);
 80003fc:	203c      	movs	r0, #60	@ 0x3c
 80003fe:	f7ff ff41 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xB4);     //Dot inversion
 8000402:	20b4      	movs	r0, #180	@ 0xb4
 8000404:	f7ff ff60 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x03);
 8000408:	2003      	movs	r0, #3
 800040a:	f7ff ff3b 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC0);     //AVDD GVDD
 800040e:	20c0      	movs	r0, #192	@ 0xc0
 8000410:	f7ff ff5a 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0xAB);
 8000414:	20ab      	movs	r0, #171	@ 0xab
 8000416:	f7ff ff35 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0B);
 800041a:	200b      	movs	r0, #11
 800041c:	f7ff ff32 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 8000420:	2004      	movs	r0, #4
 8000422:	f7ff ff2f 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC1);     //VGH VGL
 8000426:	20c1      	movs	r0, #193	@ 0xc1
 8000428:	f7ff ff4e 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0xC5);   //C0
 800042c:	20c5      	movs	r0, #197	@ 0xc5
 800042e:	f7ff ff29 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC2);     //Normal Mode
 8000432:	20c2      	movs	r0, #194	@ 0xc2
 8000434:	f7ff ff48 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x0D);
 8000438:	200d      	movs	r0, #13
 800043a:	f7ff ff23 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 800043e:	2000      	movs	r0, #0
 8000440:	f7ff ff20 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC3);     //Idle
 8000444:	20c3      	movs	r0, #195	@ 0xc3
 8000446:	f7ff ff3f 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D);
 800044a:	208d      	movs	r0, #141	@ 0x8d
 800044c:	f7ff ff1a 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x6A);
 8000450:	206a      	movs	r0, #106	@ 0x6a
 8000452:	f7ff ff17 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC4);     //Partial+Full
 8000456:	20c4      	movs	r0, #196	@ 0xc4
 8000458:	f7ff ff36 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D);
 800045c:	208d      	movs	r0, #141	@ 0x8d
 800045e:	f7ff ff11 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xEE);
 8000462:	20ee      	movs	r0, #238	@ 0xee
 8000464:	f7ff ff0e 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xC5);     //VCOM
 8000468:	20c5      	movs	r0, #197	@ 0xc5
 800046a:	f7ff ff2d 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x0F);
 800046e:	200f      	movs	r0, #15
 8000470:	f7ff ff08 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xE0);     //positive gamma
 8000474:	20e0      	movs	r0, #224	@ 0xe0
 8000476:	f7ff ff27 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x07);
 800047a:	2007      	movs	r0, #7
 800047c:	f7ff ff02 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0E);
 8000480:	200e      	movs	r0, #14
 8000482:	f7ff feff 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);
 8000486:	2008      	movs	r0, #8
 8000488:	f7ff fefc 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 800048c:	2007      	movs	r0, #7
 800048e:	f7ff fef9 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x10);
 8000492:	2010      	movs	r0, #16
 8000494:	f7ff fef6 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 8000498:	2007      	movs	r0, #7
 800049a:	f7ff fef3 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x02);
 800049e:	2002      	movs	r0, #2
 80004a0:	f7ff fef0 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 80004a4:	2007      	movs	r0, #7
 80004a6:	f7ff feed 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);
 80004aa:	2009      	movs	r0, #9
 80004ac:	f7ff feea 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 80004b0:	200f      	movs	r0, #15
 80004b2:	f7ff fee7 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25);
 80004b6:	2025      	movs	r0, #37	@ 0x25
 80004b8:	f7ff fee4 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x36);
 80004bc:	2036      	movs	r0, #54	@ 0x36
 80004be:	f7ff fee1 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fede 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);
 80004c8:	2008      	movs	r0, #8
 80004ca:	f7ff fedb 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 80004ce:	2004      	movs	r0, #4
 80004d0:	f7ff fed8 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x10);
 80004d4:	2010      	movs	r0, #16
 80004d6:	f7ff fed5 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0xE1);     //negative gamma
 80004da:	20e1      	movs	r0, #225	@ 0xe1
 80004dc:	f7ff fef4 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x0A);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f7ff fecf 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0D);
 80004e6:	200d      	movs	r0, #13
 80004e8:	f7ff fecc 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08);
 80004ec:	2008      	movs	r0, #8
 80004ee:	f7ff fec9 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 80004f2:	2007      	movs	r0, #7
 80004f4:	f7ff fec6 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 80004f8:	200f      	movs	r0, #15
 80004fa:	f7ff fec3 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 80004fe:	2007      	movs	r0, #7
 8000500:	f7ff fec0 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff febd 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07);
 800050a:	2007      	movs	r0, #7
 800050c:	f7ff feba 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);
 8000510:	2009      	movs	r0, #9
 8000512:	f7ff feb7 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0F);
 8000516:	200f      	movs	r0, #15
 8000518:	f7ff feb4 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25);
 800051c:	2025      	movs	r0, #37	@ 0x25
 800051e:	f7ff feb1 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x35);
 8000522:	2035      	movs	r0, #53	@ 0x35
 8000524:	f7ff feae 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff feab 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x09);
 800052e:	2009      	movs	r0, #9
 8000530:	f7ff fea8 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04);
 8000534:	2004      	movs	r0, #4
 8000536:	f7ff fea5 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x10);
 800053a:	2010      	movs	r0, #16
 800053c:	f7ff fea2 	bl	8000284 <LCD_WR_DATA8>

	LCD_WR_REG(0xFC);
 8000540:	20fc      	movs	r0, #252	@ 0xfc
 8000542:	f7ff fec1 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x80);
 8000546:	2080      	movs	r0, #128	@ 0x80
 8000548:	f7ff fe9c 	bl	8000284 <LCD_WR_DATA8>

	LCD_WR_REG(0x3A);
 800054c:	203a      	movs	r0, #58	@ 0x3a
 800054e:	f7ff febb 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8000552:	2005      	movs	r0, #5
 8000554:	f7ff fe96 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0x36);
 8000558:	2036      	movs	r0, #54	@ 0x36
 800055a:	f7ff feb5 	bl	80002c8 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x08);
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC8);
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x78);
 800055e:	2078      	movs	r0, #120	@ 0x78
 8000560:	f7ff fe90 	bl	8000284 <LCD_WR_DATA8>
	else LCD_WR_DATA8(0xA8);
	LCD_WR_REG(0x21);     //Display inversion
 8000564:	2021      	movs	r0, #33	@ 0x21
 8000566:	f7ff feaf 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_REG(0x29);     //Display on
 800056a:	2029      	movs	r0, #41	@ 0x29
 800056c:	f7ff feac 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_REG(0x2A);     //Set Column Address
 8000570:	202a      	movs	r0, #42	@ 0x2a
 8000572:	f7ff fea9 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff fe84 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x1A);  //26
 800057c:	201a      	movs	r0, #26
 800057e:	f7ff fe81 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe7e 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x69);   //105
 8000588:	2069      	movs	r0, #105	@ 0x69
 800058a:	f7ff fe7b 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0x2B);     //Set Page Address
 800058e:	202b      	movs	r0, #43	@ 0x2b
 8000590:	f7ff fe9a 	bl	80002c8 <LCD_WR_REG>
	LCD_WR_DATA8(0x00);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe75 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01);    //1
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fe72 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff fe6f 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xA0);    //160
 80005a6:	20a0      	movs	r0, #160	@ 0xa0
 80005a8:	f7ff fe6c 	bl	8000284 <LCD_WR_DATA8>
	LCD_WR_REG(0x2C);
 80005ac:	202c      	movs	r0, #44	@ 0x2c
 80005ae:	f7ff fe8b 	bl	80002c8 <LCD_WR_REG>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010800 	.word	0x40010800

080005bc <LCD_Fill>:
                xend,yend   终止坐标
								color       要填充的颜色
      返回值：  无
******************************************************************************/
void LCD_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4604      	mov	r4, r0
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4623      	mov	r3, r4
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	4603      	mov	r3, r0
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	3b01      	subs	r3, #1
 80005de:	b29a      	uxth	r2, r3
 80005e0:	883b      	ldrh	r3, [r7, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	88b9      	ldrh	r1, [r7, #4]
 80005e8:	88f8      	ldrh	r0, [r7, #6]
 80005ea:	f7ff fe87 	bl	80002fc <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 80005ee:	88bb      	ldrh	r3, [r7, #4]
 80005f0:	81fb      	strh	r3, [r7, #14]
 80005f2:	e010      	b.n	8000616 <LCD_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	81bb      	strh	r3, [r7, #12]
 80005f8:	e006      	b.n	8000608 <LCD_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80005fa:	8c3b      	ldrh	r3, [r7, #32]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fe4e 	bl	800029e <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000602:	89bb      	ldrh	r3, [r7, #12]
 8000604:	3301      	adds	r3, #1
 8000606:	81bb      	strh	r3, [r7, #12]
 8000608:	89ba      	ldrh	r2, [r7, #12]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	429a      	cmp	r2, r3
 800060e:	d3f4      	bcc.n	80005fa <LCD_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	3301      	adds	r3, #1
 8000614:	81fb      	strh	r3, [r7, #14]
 8000616:	89fa      	ldrh	r2, [r7, #14]
 8000618:	883b      	ldrh	r3, [r7, #0]
 800061a:	429a      	cmp	r2, r3
 800061c:	d3ea      	bcc.n	80005f4 <LCD_Fill+0x38>
		}
	}
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	460b      	mov	r3, r1
 8000634:	80bb      	strh	r3, [r7, #4]
 8000636:	4613      	mov	r3, r2
 8000638:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	88fa      	ldrh	r2, [r7, #6]
 800063e:	88b9      	ldrh	r1, [r7, #4]
 8000640:	88f8      	ldrh	r0, [r7, #6]
 8000642:	f7ff fe5b 	bl	80002fc <LCD_Address_Set>
	LCD_WR_DATA(color);
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe28 	bl	800029e <LCD_WR_DATA>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <LCD_ShowChinese>:
                sizey 字号 可选 16 24 32
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b088      	sub	sp, #32
 800065a:	af04      	add	r7, sp, #16
 800065c:	60ba      	str	r2, [r7, #8]
 800065e:	461a      	mov	r2, r3
 8000660:	4603      	mov	r3, r0
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	460b      	mov	r3, r1
 8000666:	81bb      	strh	r3, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	80fb      	strh	r3, [r7, #6]
	while(*s!=0)
 800066c:	e053      	b.n	8000716 <LCD_ShowChinese+0xc0>
	{
		if(sizey==12) LCD_ShowChinese12x12(x,y,s,fc,bc,sizey,mode);
 800066e:	7f3b      	ldrb	r3, [r7, #28]
 8000670:	2b0c      	cmp	r3, #12
 8000672:	d10e      	bne.n	8000692 <LCD_ShowChinese+0x3c>
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	89b9      	ldrh	r1, [r7, #12]
 8000678:	89f8      	ldrh	r0, [r7, #14]
 800067a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	7f3b      	ldrb	r3, [r7, #28]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	8b3b      	ldrh	r3, [r7, #24]
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f000 f84c 	bl	8000728 <LCD_ShowChinese12x12>
 8000690:	e034      	b.n	80006fc <LCD_ShowChinese+0xa6>
		else if(sizey==16) LCD_ShowChinese16x16(x,y,s,fc,bc,sizey,mode);
 8000692:	7f3b      	ldrb	r3, [r7, #28]
 8000694:	2b10      	cmp	r3, #16
 8000696:	d10e      	bne.n	80006b6 <LCD_ShowChinese+0x60>
 8000698:	88fa      	ldrh	r2, [r7, #6]
 800069a:	89b9      	ldrh	r1, [r7, #12]
 800069c:	89f8      	ldrh	r0, [r7, #14]
 800069e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	7f3b      	ldrb	r3, [r7, #28]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f000 f914 	bl	80008dc <LCD_ShowChinese16x16>
 80006b4:	e022      	b.n	80006fc <LCD_ShowChinese+0xa6>
		else if(sizey==24) LCD_ShowChinese24x24(x,y,s,fc,bc,sizey,mode);
 80006b6:	7f3b      	ldrb	r3, [r7, #28]
 80006b8:	2b18      	cmp	r3, #24
 80006ba:	d10e      	bne.n	80006da <LCD_ShowChinese+0x84>
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	89b9      	ldrh	r1, [r7, #12]
 80006c0:	89f8      	ldrh	r0, [r7, #14]
 80006c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	7f3b      	ldrb	r3, [r7, #28]
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	8b3b      	ldrh	r3, [r7, #24]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4613      	mov	r3, r2
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f000 f9e0 	bl	8000a98 <LCD_ShowChinese24x24>
 80006d8:	e010      	b.n	80006fc <LCD_ShowChinese+0xa6>
		else if(sizey==32) LCD_ShowChinese32x32(x,y,s,fc,bc,sizey,mode);
 80006da:	7f3b      	ldrb	r3, [r7, #28]
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d11f      	bne.n	8000720 <LCD_ShowChinese+0xca>
 80006e0:	88fa      	ldrh	r2, [r7, #6]
 80006e2:	89b9      	ldrh	r1, [r7, #12]
 80006e4:	89f8      	ldrh	r0, [r7, #14]
 80006e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	7f3b      	ldrb	r3, [r7, #28]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	8b3b      	ldrh	r3, [r7, #24]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4613      	mov	r3, r2
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f000 faa8 	bl	8000c4c <LCD_ShowChinese32x32>
		else return;
		s+=1;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
		x+=sizey/4;
 8000702:	7f3b      	ldrb	r3, [r7, #28]
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4413      	add	r3, r2
 800070e:	81fb      	strh	r3, [r7, #14]
		x+=2;
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	3302      	adds	r3, #2
 8000714:	81fb      	strh	r3, [r7, #14]
	while(*s!=0)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1a7      	bne.n	800066e <LCD_ShowChinese+0x18>
 800071e:	e000      	b.n	8000722 <LCD_ShowChinese+0xcc>
		else return;
 8000720:	bf00      	nop
	}
}
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LCD_ShowChinese12x12>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese12x12(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b089      	sub	sp, #36	@ 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60ba      	str	r2, [r7, #8]
 8000730:	461a      	mov	r2, r3
 8000732:	4603      	mov	r3, r0
 8000734:	81fb      	strh	r3, [r7, #14]
 8000736:	460b      	mov	r3, r1
 8000738:	81bb      	strh	r3, [r7, #12]
 800073a:	4613      	mov	r3, r2
 800073c:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 800073e:	2300      	movs	r3, #0
 8000740:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//汉字数目
	uint16_t TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8000746:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000754:	f003 0307 	and.w	r3, r3, #7
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4413      	add	r3, r2
 8000766:	b29b      	uxth	r3, r3
 8000768:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800076c:	b292      	uxth	r2, r2
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	82fb      	strh	r3, [r7, #22]

//	HZnum=sizeof(tfont12)/sizeof(typFNT_GB12);	//统计汉字数目
	HZnum = font12_count;
 8000774:	4b57      	ldr	r3, [pc, #348]	@ (80008d4 <LCD_ShowChinese12x12+0x1ac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 800077a:	2300      	movs	r3, #0
 800077c:	837b      	strh	r3, [r7, #26]
 800077e:	e09e      	b.n	80008be <LCD_ShowChinese12x12+0x196>
	{
		if((tfont12[k].Index[0]==*(s))&&(tfont12[k].Index[1]==*(s+1)))
 8000780:	8b7b      	ldrh	r3, [r7, #26]
 8000782:	4a55      	ldr	r2, [pc, #340]	@ (80008d8 <LCD_ShowChinese12x12+0x1b0>)
 8000784:	211a      	movs	r1, #26
 8000786:	fb01 f303 	mul.w	r3, r1, r3
 800078a:	4413      	add	r3, r2
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	f040 808f 	bne.w	80008b6 <LCD_ShowChinese12x12+0x18e>
 8000798:	8b7b      	ldrh	r3, [r7, #26]
 800079a:	4a4f      	ldr	r2, [pc, #316]	@ (80008d8 <LCD_ShowChinese12x12+0x1b0>)
 800079c:	211a      	movs	r1, #26
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	4413      	add	r3, r2
 80007a4:	3301      	adds	r3, #1
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	3301      	adds	r3, #1
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	f040 8081 	bne.w	80008b6 <LCD_ShowChinese12x12+0x18e>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 80007b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	4413      	add	r3, r2
 80007be:	b29b      	uxth	r3, r3
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b29c      	uxth	r4, r3
 80007c4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	89bb      	ldrh	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	89b9      	ldrh	r1, [r7, #12]
 80007d6:	89f8      	ldrh	r0, [r7, #14]
 80007d8:	4622      	mov	r2, r4
 80007da:	f7ff fd8f 	bl	80002fc <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	77fb      	strb	r3, [r7, #31]
 80007e2:	e063      	b.n	80008ac <LCD_ShowChinese12x12+0x184>
			{
				for(j=0;j<8;j++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	77bb      	strb	r3, [r7, #30]
 80007e8:	e05a      	b.n	80008a0 <LCD_ShowChinese12x12+0x178>
				{
					if(!mode)//非叠加方式
 80007ea:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d12b      	bne.n	800084a <LCD_ShowChinese12x12+0x122>
					{
						if(tfont12[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 80007f2:	8b7a      	ldrh	r2, [r7, #26]
 80007f4:	7ffb      	ldrb	r3, [r7, #31]
 80007f6:	4938      	ldr	r1, [pc, #224]	@ (80008d8 <LCD_ShowChinese12x12+0x1b0>)
 80007f8:	201a      	movs	r0, #26
 80007fa:	fb00 f202 	mul.w	r2, r0, r2
 80007fe:	440a      	add	r2, r1
 8000800:	4413      	add	r3, r2
 8000802:	3302      	adds	r3, #2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	fa42 f303 	asr.w	r3, r2, r3
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <LCD_ShowChinese12x12+0xf8>
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd40 	bl	800029e <LCD_WR_DATA>
 800081e:	e003      	b.n	8000828 <LCD_ShowChinese12x12+0x100>
						else LCD_WR_DATA(bc);
 8000820:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fd3b 	bl	800029e <LCD_WR_DATA>
						m++;
 8000828:	7f7b      	ldrb	r3, [r7, #29]
 800082a:	3301      	adds	r3, #1
 800082c:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 800082e:	7f7b      	ldrb	r3, [r7, #29]
 8000830:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000834:	fbb3 f1f2 	udiv	r1, r3, r2
 8000838:	fb01 f202 	mul.w	r2, r1, r2
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d12a      	bne.n	800089a <LCD_ShowChinese12x12+0x172>
						{
							m=0;
 8000844:	2300      	movs	r3, #0
 8000846:	777b      	strb	r3, [r7, #29]
							break;
 8000848:	e02d      	b.n	80008a6 <LCD_ShowChinese12x12+0x17e>
						}
					}
					else//叠加方式
					{
						if(tfont12[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//画一个点
 800084a:	8b7a      	ldrh	r2, [r7, #26]
 800084c:	7ffb      	ldrb	r3, [r7, #31]
 800084e:	4922      	ldr	r1, [pc, #136]	@ (80008d8 <LCD_ShowChinese12x12+0x1b0>)
 8000850:	201a      	movs	r0, #26
 8000852:	fb00 f202 	mul.w	r2, r0, r2
 8000856:	440a      	add	r2, r1
 8000858:	4413      	add	r3, r2
 800085a:	3302      	adds	r3, #2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	7fbb      	ldrb	r3, [r7, #30]
 8000862:	fa42 f303 	asr.w	r3, r2, r3
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d005      	beq.n	800087a <LCD_ShowChinese12x12+0x152>
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	89b9      	ldrh	r1, [r7, #12]
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fed7 	bl	8000628 <LCD_DrawPoint>
						x++;
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	3301      	adds	r3, #1
 800087e:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8000880:	89fa      	ldrh	r2, [r7, #14]
 8000882:	8b3b      	ldrh	r3, [r7, #24]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800088a:	429a      	cmp	r2, r3
 800088c:	d105      	bne.n	800089a <LCD_ShowChinese12x12+0x172>
						{
							x=x0;
 800088e:	8b3b      	ldrh	r3, [r7, #24]
 8000890:	81fb      	strh	r3, [r7, #14]
							y++;
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	81bb      	strh	r3, [r7, #12]
							break;
 8000898:	e005      	b.n	80008a6 <LCD_ShowChinese12x12+0x17e>
				for(j=0;j<8;j++)
 800089a:	7fbb      	ldrb	r3, [r7, #30]
 800089c:	3301      	adds	r3, #1
 800089e:	77bb      	strb	r3, [r7, #30]
 80008a0:	7fbb      	ldrb	r3, [r7, #30]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	d9a1      	bls.n	80007ea <LCD_ShowChinese12x12+0xc2>
			for(i=0;i<TypefaceNum;i++)
 80008a6:	7ffb      	ldrb	r3, [r7, #31]
 80008a8:	3301      	adds	r3, #1
 80008aa:	77fb      	strb	r3, [r7, #31]
 80008ac:	7ffb      	ldrb	r3, [r7, #31]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	8afa      	ldrh	r2, [r7, #22]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d896      	bhi.n	80007e4 <LCD_ShowChinese12x12+0xbc>
						}
					}
				}
			}
		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
 80008b6:	bf00      	nop
	for(k=0;k<HZnum;k++)
 80008b8:	8b7b      	ldrh	r3, [r7, #26]
 80008ba:	3301      	adds	r3, #1
 80008bc:	837b      	strh	r3, [r7, #26]
 80008be:	8b7a      	ldrh	r2, [r7, #26]
 80008c0:	8abb      	ldrh	r3, [r7, #20]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	f4ff af5c 	bcc.w	8000780 <LCD_ShowChinese12x12+0x58>
	}
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3724      	adds	r7, #36	@ 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000000 	.word	0x20000000
 80008d8:	0800676c 	.word	0x0800676c

080008dc <LCD_ShowChinese16x16>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese16x16(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60ba      	str	r2, [r7, #8]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4603      	mov	r3, r0
 80008e8:	81fb      	strh	r3, [r7, #14]
 80008ea:	460b      	mov	r3, r1
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	4613      	mov	r3, r2
 80008f0:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//汉字数目
	uint16_t TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	833b      	strh	r3, [r7, #24]
  TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 80008fa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008fe:	08db      	lsrs	r3, r3, #3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b29b      	uxth	r3, r3
 800091c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000920:	b292      	uxth	r2, r2
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	82fb      	strh	r3, [r7, #22]
//	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//统计汉字数目
  	HZnum = font16_count;
 8000928:	4b59      	ldr	r3, [pc, #356]	@ (8000a90 <LCD_ShowChinese16x16+0x1b4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 800092e:	2300      	movs	r3, #0
 8000930:	837b      	strh	r3, [r7, #26]
 8000932:	e0a2      	b.n	8000a7a <LCD_ShowChinese16x16+0x19e>
	{
		if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 8000934:	8b7a      	ldrh	r2, [r7, #26]
 8000936:	4957      	ldr	r1, [pc, #348]	@ (8000a94 <LCD_ShowChinese16x16+0x1b8>)
 8000938:	4613      	mov	r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	429a      	cmp	r2, r3
 800094a:	f040 8092 	bne.w	8000a72 <LCD_ShowChinese16x16+0x196>
 800094e:	8b7a      	ldrh	r2, [r7, #26]
 8000950:	4950      	ldr	r1, [pc, #320]	@ (8000a94 <LCD_ShowChinese16x16+0x1b8>)
 8000952:	4613      	mov	r3, r2
 8000954:	011b      	lsls	r3, r3, #4
 8000956:	4413      	add	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	3301      	adds	r3, #1
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3301      	adds	r3, #1
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	f040 8083 	bne.w	8000a72 <LCD_ShowChinese16x16+0x196>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 800096c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000970:	b29a      	uxth	r2, r3
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	3b01      	subs	r3, #1
 800097a:	b29c      	uxth	r4, r3
 800097c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000980:	b29a      	uxth	r2, r3
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	4413      	add	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	3b01      	subs	r3, #1
 800098a:	b29b      	uxth	r3, r3
 800098c:	89b9      	ldrh	r1, [r7, #12]
 800098e:	89f8      	ldrh	r0, [r7, #14]
 8000990:	4622      	mov	r2, r4
 8000992:	f7ff fcb3 	bl	80002fc <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8000996:	2300      	movs	r3, #0
 8000998:	77fb      	strb	r3, [r7, #31]
 800099a:	e065      	b.n	8000a68 <LCD_ShowChinese16x16+0x18c>
			{
				for(j=0;j<8;j++)
 800099c:	2300      	movs	r3, #0
 800099e:	77bb      	strb	r3, [r7, #30]
 80009a0:	e05c      	b.n	8000a5c <LCD_ShowChinese16x16+0x180>
				{
					if(!mode)//非叠加方式
 80009a2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d12c      	bne.n	8000a04 <LCD_ShowChinese16x16+0x128>
					{
						if(tfont16[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 80009aa:	8b7a      	ldrh	r2, [r7, #26]
 80009ac:	7ff9      	ldrb	r1, [r7, #31]
 80009ae:	4839      	ldr	r0, [pc, #228]	@ (8000a94 <LCD_ShowChinese16x16+0x1b8>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4403      	add	r3, r0
 80009ba:	440b      	add	r3, r1
 80009bc:	3302      	adds	r3, #2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	7fbb      	ldrb	r3, [r7, #30]
 80009c4:	fa42 f303 	asr.w	r3, r2, r3
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <LCD_ShowChinese16x16+0xfe>
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fc63 	bl	800029e <LCD_WR_DATA>
 80009d8:	e003      	b.n	80009e2 <LCD_ShowChinese16x16+0x106>
						else LCD_WR_DATA(bc);
 80009da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fc5e 	bl	800029e <LCD_WR_DATA>
						m++;
 80009e2:	7f7b      	ldrb	r3, [r7, #29]
 80009e4:	3301      	adds	r3, #1
 80009e6:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 80009e8:	7f7b      	ldrb	r3, [r7, #29]
 80009ea:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80009ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80009f2:	fb01 f202 	mul.w	r2, r1, r2
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d12b      	bne.n	8000a56 <LCD_ShowChinese16x16+0x17a>
						{
							m=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	777b      	strb	r3, [r7, #29]
							break;
 8000a02:	e02e      	b.n	8000a62 <LCD_ShowChinese16x16+0x186>
						}
					}
					else//叠加方式
					{
						if(tfont16[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//画一个点
 8000a04:	8b7a      	ldrh	r2, [r7, #26]
 8000a06:	7ff9      	ldrb	r1, [r7, #31]
 8000a08:	4822      	ldr	r0, [pc, #136]	@ (8000a94 <LCD_ShowChinese16x16+0x1b8>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4403      	add	r3, r0
 8000a14:	440b      	add	r3, r1
 8000a16:	3302      	adds	r3, #2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	7fbb      	ldrb	r3, [r7, #30]
 8000a1e:	fa42 f303 	asr.w	r3, r2, r3
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <LCD_ShowChinese16x16+0x15a>
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	89b9      	ldrh	r1, [r7, #12]
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdf9 	bl	8000628 <LCD_DrawPoint>
						x++;
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8000a3c:	89fa      	ldrh	r2, [r7, #14]
 8000a3e:	8b3b      	ldrh	r3, [r7, #24]
 8000a40:	1ad2      	subs	r2, r2, r3
 8000a42:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d105      	bne.n	8000a56 <LCD_ShowChinese16x16+0x17a>
						{
							x=x0;
 8000a4a:	8b3b      	ldrh	r3, [r7, #24]
 8000a4c:	81fb      	strh	r3, [r7, #14]
							y++;
 8000a4e:	89bb      	ldrh	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	81bb      	strh	r3, [r7, #12]
							break;
 8000a54:	e005      	b.n	8000a62 <LCD_ShowChinese16x16+0x186>
				for(j=0;j<8;j++)
 8000a56:	7fbb      	ldrb	r3, [r7, #30]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	77bb      	strb	r3, [r7, #30]
 8000a5c:	7fbb      	ldrb	r3, [r7, #30]
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d99f      	bls.n	80009a2 <LCD_ShowChinese16x16+0xc6>
			for(i=0;i<TypefaceNum;i++)
 8000a62:	7ffb      	ldrb	r3, [r7, #31]
 8000a64:	3301      	adds	r3, #1
 8000a66:	77fb      	strb	r3, [r7, #31]
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	8afa      	ldrh	r2, [r7, #22]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d894      	bhi.n	800099c <LCD_ShowChinese16x16+0xc0>
						}
					}
				}
			}
		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
 8000a72:	bf00      	nop
	for(k=0;k<HZnum;k++)
 8000a74:	8b7b      	ldrh	r3, [r7, #26]
 8000a76:	3301      	adds	r3, #1
 8000a78:	837b      	strh	r3, [r7, #26]
 8000a7a:	8b7a      	ldrh	r2, [r7, #26]
 8000a7c:	8abb      	ldrh	r3, [r7, #20]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	f4ff af58 	bcc.w	8000934 <LCD_ShowChinese16x16+0x58>
	}
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3724      	adds	r7, #36	@ 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004
 8000a94:	080067bc 	.word	0x080067bc

08000a98 <LCD_ShowChinese24x24>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese24x24(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	81fb      	strh	r3, [r7, #14]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	81bb      	strh	r3, [r7, #12]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//汉字数目
	uint16_t TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8000ab6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf14      	ite	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	2300      	moveq	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000adc:	b292      	uxth	r2, r2
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	82fb      	strh	r3, [r7, #22]
//	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//统计汉字数目
	HZnum = font24_count;
 8000ae4:	4b57      	ldr	r3, [pc, #348]	@ (8000c44 <LCD_ShowChinese24x24+0x1ac>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	837b      	strh	r3, [r7, #26]
 8000aee:	e09e      	b.n	8000c2e <LCD_ShowChinese24x24+0x196>
	{
		if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8000af0:	8b7b      	ldrh	r3, [r7, #26]
 8000af2:	4a55      	ldr	r2, [pc, #340]	@ (8000c48 <LCD_ShowChinese24x24+0x1b0>)
 8000af4:	214a      	movs	r1, #74	@ 0x4a
 8000af6:	fb01 f303 	mul.w	r3, r1, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	f040 808f 	bne.w	8000c26 <LCD_ShowChinese24x24+0x18e>
 8000b08:	8b7b      	ldrh	r3, [r7, #26]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	@ (8000c48 <LCD_ShowChinese24x24+0x1b0>)
 8000b0c:	214a      	movs	r1, #74	@ 0x4a
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	3301      	adds	r3, #1
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	f040 8081 	bne.w	8000c26 <LCD_ShowChinese24x24+0x18e>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8000b24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b29c      	uxth	r4, r3
 8000b34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	89bb      	ldrh	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	89b9      	ldrh	r1, [r7, #12]
 8000b46:	89f8      	ldrh	r0, [r7, #14]
 8000b48:	4622      	mov	r2, r4
 8000b4a:	f7ff fbd7 	bl	80002fc <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	77fb      	strb	r3, [r7, #31]
 8000b52:	e063      	b.n	8000c1c <LCD_ShowChinese24x24+0x184>
			{
				for(j=0;j<8;j++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	77bb      	strb	r3, [r7, #30]
 8000b58:	e05a      	b.n	8000c10 <LCD_ShowChinese24x24+0x178>
				{
					if(!mode)//非叠加方式
 8000b5a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d12b      	bne.n	8000bba <LCD_ShowChinese24x24+0x122>
					{
						if(tfont24[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8000b62:	8b7a      	ldrh	r2, [r7, #26]
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	4938      	ldr	r1, [pc, #224]	@ (8000c48 <LCD_ShowChinese24x24+0x1b0>)
 8000b68:	204a      	movs	r0, #74	@ 0x4a
 8000b6a:	fb00 f202 	mul.w	r2, r0, r2
 8000b6e:	440a      	add	r2, r1
 8000b70:	4413      	add	r3, r2
 8000b72:	3302      	adds	r3, #2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	7fbb      	ldrb	r3, [r7, #30]
 8000b7a:	fa42 f303 	asr.w	r3, r2, r3
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <LCD_ShowChinese24x24+0xf8>
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb88 	bl	800029e <LCD_WR_DATA>
 8000b8e:	e003      	b.n	8000b98 <LCD_ShowChinese24x24+0x100>
						else LCD_WR_DATA(bc);
 8000b90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fb83 	bl	800029e <LCD_WR_DATA>
						m++;
 8000b98:	7f7b      	ldrb	r3, [r7, #29]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8000b9e:	7f7b      	ldrb	r3, [r7, #29]
 8000ba0:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ba8:	fb01 f202 	mul.w	r2, r1, r2
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d12a      	bne.n	8000c0a <LCD_ShowChinese24x24+0x172>
						{
							m=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	777b      	strb	r3, [r7, #29]
							break;
 8000bb8:	e02d      	b.n	8000c16 <LCD_ShowChinese24x24+0x17e>
						}
					}
					else//叠加方式
					{
						if(tfont24[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//画一个点
 8000bba:	8b7a      	ldrh	r2, [r7, #26]
 8000bbc:	7ffb      	ldrb	r3, [r7, #31]
 8000bbe:	4922      	ldr	r1, [pc, #136]	@ (8000c48 <LCD_ShowChinese24x24+0x1b0>)
 8000bc0:	204a      	movs	r0, #74	@ 0x4a
 8000bc2:	fb00 f202 	mul.w	r2, r0, r2
 8000bc6:	440a      	add	r2, r1
 8000bc8:	4413      	add	r3, r2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	7fbb      	ldrb	r3, [r7, #30]
 8000bd2:	fa42 f303 	asr.w	r3, r2, r3
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <LCD_ShowChinese24x24+0x152>
 8000bde:	88fa      	ldrh	r2, [r7, #6]
 8000be0:	89b9      	ldrh	r1, [r7, #12]
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd1f 	bl	8000628 <LCD_DrawPoint>
						x++;
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	3301      	adds	r3, #1
 8000bee:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8000bf0:	89fa      	ldrh	r2, [r7, #14]
 8000bf2:	8b3b      	ldrh	r3, [r7, #24]
 8000bf4:	1ad2      	subs	r2, r2, r3
 8000bf6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d105      	bne.n	8000c0a <LCD_ShowChinese24x24+0x172>
						{
							x=x0;
 8000bfe:	8b3b      	ldrh	r3, [r7, #24]
 8000c00:	81fb      	strh	r3, [r7, #14]
							y++;
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	3301      	adds	r3, #1
 8000c06:	81bb      	strh	r3, [r7, #12]
							break;
 8000c08:	e005      	b.n	8000c16 <LCD_ShowChinese24x24+0x17e>
				for(j=0;j<8;j++)
 8000c0a:	7fbb      	ldrb	r3, [r7, #30]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	77bb      	strb	r3, [r7, #30]
 8000c10:	7fbb      	ldrb	r3, [r7, #30]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d9a1      	bls.n	8000b5a <LCD_ShowChinese24x24+0xc2>
			for(i=0;i<TypefaceNum;i++)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	77fb      	strb	r3, [r7, #31]
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	8afa      	ldrh	r2, [r7, #22]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d896      	bhi.n	8000b54 <LCD_ShowChinese24x24+0xbc>
						}
					}
				}
			}
		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
 8000c26:	bf00      	nop
	for(k=0;k<HZnum;k++)
 8000c28:	8b7b      	ldrh	r3, [r7, #26]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	837b      	strh	r3, [r7, #26]
 8000c2e:	8b7a      	ldrh	r2, [r7, #26]
 8000c30:	8abb      	ldrh	r3, [r7, #20]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	f4ff af5c 	bcc.w	8000af0 <LCD_ShowChinese24x24+0x58>
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	08006824 	.word	0x08006824

08000c4c <LCD_ShowChinese32x32>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChinese32x32(uint16_t x,uint16_t y,uint8_t *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4603      	mov	r3, r0
 8000c58:	81fb      	strh	r3, [r7, #14]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	81bb      	strh	r3, [r7, #12]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80fb      	strh	r3, [r7, #6]
	uint8_t i,j,m=0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	777b      	strb	r3, [r7, #29]
	uint16_t k;
	uint16_t HZnum;//汉字数目
	uint16_t TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	833b      	strh	r3, [r7, #24]
	TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
 8000c6a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000c90:	b292      	uxth	r2, r2
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	82fb      	strh	r3, [r7, #22]
//	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//统计汉字数目
	HZnum = font32_count;
 8000c98:	4b59      	ldr	r3, [pc, #356]	@ (8000e00 <LCD_ShowChinese32x32+0x1b4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	82bb      	strh	r3, [r7, #20]
	for(k=0;k<HZnum;k++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	837b      	strh	r3, [r7, #26]
 8000ca2:	e0a2      	b.n	8000dea <LCD_ShowChinese32x32+0x19e>
	{
		if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 8000ca4:	8b7a      	ldrh	r2, [r7, #26]
 8000ca6:	4957      	ldr	r1, [pc, #348]	@ (8000e04 <LCD_ShowChinese32x32+0x1b8>)
 8000ca8:	4613      	mov	r3, r2
 8000caa:	019b      	lsls	r3, r3, #6
 8000cac:	4413      	add	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	440b      	add	r3, r1
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f040 8092 	bne.w	8000de2 <LCD_ShowChinese32x32+0x196>
 8000cbe:	8b7a      	ldrh	r2, [r7, #26]
 8000cc0:	4950      	ldr	r1, [pc, #320]	@ (8000e04 <LCD_ShowChinese32x32+0x1b8>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	4413      	add	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	440b      	add	r3, r1
 8000ccc:	3301      	adds	r3, #1
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f040 8083 	bne.w	8000de2 <LCD_ShowChinese32x32+0x196>
		{
			LCD_Address_Set(x,y,x+sizey-1,y+sizey-1);
 8000cdc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29c      	uxth	r4, r3
 8000cec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	89bb      	ldrh	r3, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	89b9      	ldrh	r1, [r7, #12]
 8000cfe:	89f8      	ldrh	r0, [r7, #14]
 8000d00:	4622      	mov	r2, r4
 8000d02:	f7ff fafb 	bl	80002fc <LCD_Address_Set>
			for(i=0;i<TypefaceNum;i++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	77fb      	strb	r3, [r7, #31]
 8000d0a:	e065      	b.n	8000dd8 <LCD_ShowChinese32x32+0x18c>
			{
				for(j=0;j<8;j++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	77bb      	strb	r3, [r7, #30]
 8000d10:	e05c      	b.n	8000dcc <LCD_ShowChinese32x32+0x180>
				{
					if(!mode)//非叠加方式
 8000d12:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d12c      	bne.n	8000d74 <LCD_ShowChinese32x32+0x128>
					{
						if(tfont32[k].Msk[i]&(0x01<<j))LCD_WR_DATA(fc);
 8000d1a:	8b7a      	ldrh	r2, [r7, #26]
 8000d1c:	7ff9      	ldrb	r1, [r7, #31]
 8000d1e:	4839      	ldr	r0, [pc, #228]	@ (8000e04 <LCD_ShowChinese32x32+0x1b8>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	4413      	add	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4403      	add	r3, r0
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	7fbb      	ldrb	r3, [r7, #30]
 8000d34:	fa42 f303 	asr.w	r3, r2, r3
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <LCD_ShowChinese32x32+0xfe>
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff faab 	bl	800029e <LCD_WR_DATA>
 8000d48:	e003      	b.n	8000d52 <LCD_ShowChinese32x32+0x106>
						else LCD_WR_DATA(bc);
 8000d4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff faa6 	bl	800029e <LCD_WR_DATA>
						m++;
 8000d52:	7f7b      	ldrb	r3, [r7, #29]
 8000d54:	3301      	adds	r3, #1
 8000d56:	777b      	strb	r3, [r7, #29]
						if(m%sizey==0)
 8000d58:	7f7b      	ldrb	r3, [r7, #29]
 8000d5a:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8000d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d62:	fb01 f202 	mul.w	r2, r1, r2
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d12b      	bne.n	8000dc6 <LCD_ShowChinese32x32+0x17a>
						{
							m=0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	777b      	strb	r3, [r7, #29]
							break;
 8000d72:	e02e      	b.n	8000dd2 <LCD_ShowChinese32x32+0x186>
						}
					}
					else//叠加方式
					{
						if(tfont32[k].Msk[i]&(0x01<<j))	LCD_DrawPoint(x,y,fc);//画一个点
 8000d74:	8b7a      	ldrh	r2, [r7, #26]
 8000d76:	7ff9      	ldrb	r1, [r7, #31]
 8000d78:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <LCD_ShowChinese32x32+0x1b8>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	019b      	lsls	r3, r3, #6
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4403      	add	r3, r0
 8000d84:	440b      	add	r3, r1
 8000d86:	3302      	adds	r3, #2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	7fbb      	ldrb	r3, [r7, #30]
 8000d8e:	fa42 f303 	asr.w	r3, r2, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <LCD_ShowChinese32x32+0x15a>
 8000d9a:	88fa      	ldrh	r2, [r7, #6]
 8000d9c:	89b9      	ldrh	r1, [r7, #12]
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fc41 	bl	8000628 <LCD_DrawPoint>
						x++;
 8000da6:	89fb      	ldrh	r3, [r7, #14]
 8000da8:	3301      	adds	r3, #1
 8000daa:	81fb      	strh	r3, [r7, #14]
						if((x-x0)==sizey)
 8000dac:	89fa      	ldrh	r2, [r7, #14]
 8000dae:	8b3b      	ldrh	r3, [r7, #24]
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d105      	bne.n	8000dc6 <LCD_ShowChinese32x32+0x17a>
						{
							x=x0;
 8000dba:	8b3b      	ldrh	r3, [r7, #24]
 8000dbc:	81fb      	strh	r3, [r7, #14]
							y++;
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	81bb      	strh	r3, [r7, #12]
							break;
 8000dc4:	e005      	b.n	8000dd2 <LCD_ShowChinese32x32+0x186>
				for(j=0;j<8;j++)
 8000dc6:	7fbb      	ldrb	r3, [r7, #30]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	77bb      	strb	r3, [r7, #30]
 8000dcc:	7fbb      	ldrb	r3, [r7, #30]
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	d99f      	bls.n	8000d12 <LCD_ShowChinese32x32+0xc6>
			for(i=0;i<TypefaceNum;i++)
 8000dd2:	7ffb      	ldrb	r3, [r7, #31]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	77fb      	strb	r3, [r7, #31]
 8000dd8:	7ffb      	ldrb	r3, [r7, #31]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	8afa      	ldrh	r2, [r7, #22]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d894      	bhi.n	8000d0c <LCD_ShowChinese32x32+0xc0>
						}
					}
				}
			}
		}
		continue;  //查找到对应点阵字库立即退出，防止多个汉字重复取模带来影响
 8000de2:	bf00      	nop
	for(k=0;k<HZnum;k++)
 8000de4:	8b7b      	ldrh	r3, [r7, #26]
 8000de6:	3301      	adds	r3, #1
 8000de8:	837b      	strh	r3, [r7, #26]
 8000dea:	8b7a      	ldrh	r2, [r7, #26]
 8000dec:	8abb      	ldrh	r3, [r7, #20]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f4ff af58 	bcc.w	8000ca4 <LCD_ShowChinese32x32+0x58>
	}
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd90      	pop	{r4, r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	08006904 	.word	0x08006904

08000e08 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4604      	mov	r4, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4623      	mov	r3, r4
 8000e18:	80fb      	strh	r3, [r7, #6]
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
 8000e22:	4613      	mov	r3, r2
 8000e24:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;//一个字符所占字节大小
	uint16_t x0=x;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e58:	b292      	uxth	r2, r2
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	3b20      	subs	r3, #32
 8000e64:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b29c      	uxth	r4, r3
 8000e74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	88b9      	ldrh	r1, [r7, #4]
 8000e86:	88f8      	ldrh	r0, [r7, #6]
 8000e88:	4622      	mov	r2, r4
 8000e8a:	f7ff fa37 	bl	80002fc <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	827b      	strh	r3, [r7, #18]
 8000e92:	e086      	b.n	8000fa2 <LCD_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_12x6[num][i];		     //调用6x12字体
 8000e94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	d10b      	bne.n	8000eb4 <LCD_ShowChar+0xac>
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	8a79      	ldrh	r1, [r7, #18]
 8000ea0:	4845      	ldr	r0, [pc, #276]	@ (8000fb8 <LCD_ShowChar+0x1b0>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4403      	add	r3, r0
 8000eac:	440b      	add	r3, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	75fb      	strb	r3, [r7, #23]
 8000eb2:	e028      	b.n	8000f06 <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_16x8[num][i];		 //调用8x16字体
 8000eb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eb8:	2b10      	cmp	r3, #16
 8000eba:	d108      	bne.n	8000ece <LCD_ShowChar+0xc6>
 8000ebc:	78fa      	ldrb	r2, [r7, #3]
 8000ebe:	8a7b      	ldrh	r3, [r7, #18]
 8000ec0:	493e      	ldr	r1, [pc, #248]	@ (8000fbc <LCD_ShowChar+0x1b4>)
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	440a      	add	r2, r1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	e01b      	b.n	8000f06 <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_24x12[num][i];		 //调用12x24字体
 8000ece:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ed2:	2b18      	cmp	r3, #24
 8000ed4:	d10b      	bne.n	8000eee <LCD_ShowChar+0xe6>
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	8a79      	ldrh	r1, [r7, #18]
 8000eda:	4839      	ldr	r0, [pc, #228]	@ (8000fc0 <LCD_ShowChar+0x1b8>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4403      	add	r3, r0
 8000ee6:	440b      	add	r3, r1
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	75fb      	strb	r3, [r7, #23]
 8000eec:	e00b      	b.n	8000f06 <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_32x16[num][i];		 //调用16x32字体
 8000eee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ef2:	2b20      	cmp	r3, #32
 8000ef4:	d15b      	bne.n	8000fae <LCD_ShowChar+0x1a6>
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	8a7b      	ldrh	r3, [r7, #18]
 8000efa:	4932      	ldr	r1, [pc, #200]	@ (8000fc4 <LCD_ShowChar+0x1bc>)
 8000efc:	0192      	lsls	r2, r2, #6
 8000efe:	440a      	add	r2, r1
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	75bb      	strb	r3, [r7, #22]
 8000f0a:	e044      	b.n	8000f96 <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8000f0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d120      	bne.n	8000f56 <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f14:	7dfa      	ldrb	r2, [r7, #23]
 8000f16:	7dbb      	ldrb	r3, [r7, #22]
 8000f18:	fa42 f303 	asr.w	r3, r2, r3
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <LCD_ShowChar+0x126>
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f9b9 	bl	800029e <LCD_WR_DATA>
 8000f2c:	e003      	b.n	8000f36 <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8000f2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f9b4 	bl	800029e <LCD_WR_DATA>
				m++;
 8000f36:	7d7b      	ldrb	r3, [r7, #21]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f3c:	7d7b      	ldrb	r3, [r7, #21]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f44:	fb01 f202 	mul.w	r2, r1, r2
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d11f      	bne.n	8000f90 <LCD_ShowChar+0x188>
				{
					m=0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	757b      	strb	r3, [r7, #21]
					break;
 8000f54:	e022      	b.n	8000f9c <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 8000f56:	7dfa      	ldrb	r2, [r7, #23]
 8000f58:	7dbb      	ldrb	r3, [r7, #22]
 8000f5a:	fa42 f303 	asr.w	r3, r2, r3
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <LCD_ShowChar+0x16a>
 8000f66:	883a      	ldrh	r2, [r7, #0]
 8000f68:	88b9      	ldrh	r1, [r7, #4]
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb5b 	bl	8000628 <LCD_DrawPoint>
				x++;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	3301      	adds	r3, #1
 8000f76:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	8a3b      	ldrh	r3, [r7, #16]
 8000f7c:	1ad2      	subs	r2, r2, r3
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d105      	bne.n	8000f90 <LCD_ShowChar+0x188>
				{
					x=x0;
 8000f84:	8a3b      	ldrh	r3, [r7, #16]
 8000f86:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	80bb      	strh	r3, [r7, #4]
					break;
 8000f8e:	e005      	b.n	8000f9c <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000f90:	7dbb      	ldrb	r3, [r7, #22]
 8000f92:	3301      	adds	r3, #1
 8000f94:	75bb      	strb	r3, [r7, #22]
 8000f96:	7dbb      	ldrb	r3, [r7, #22]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d9b7      	bls.n	8000f0c <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000f9c:	8a7b      	ldrh	r3, [r7, #18]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	827b      	strh	r3, [r7, #18]
 8000fa2:	8a7a      	ldrh	r2, [r7, #18]
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	f4ff af74 	bcc.w	8000e94 <LCD_ShowChar+0x8c>
 8000fac:	e000      	b.n	8000fb0 <LCD_ShowChar+0x1a8>
		else return;
 8000fae:	bf00      	nop
				}
			}
		}
	}
}
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08003378 	.word	0x08003378
 8000fbc:	080037ec 	.word	0x080037ec
 8000fc0:	08003ddc 	.word	0x08003ddc
 8000fc4:	08004fac 	.word	0x08004fac

08000fc8 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(uint16_t x,uint16_t y,const uint8_t *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	60ba      	str	r2, [r7, #8]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	81fb      	strh	r3, [r7, #14]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	81bb      	strh	r3, [r7, #12]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 8000fde:	e01a      	b.n	8001016 <LCD_ShowString+0x4e>
	{
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	88fc      	ldrh	r4, [r7, #6]
 8000fe6:	89b9      	ldrh	r1, [r7, #12]
 8000fe8:	89f8      	ldrh	r0, [r7, #14]
 8000fea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	8c3b      	ldrh	r3, [r7, #32]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4623      	mov	r3, r4
 8000ffc:	f7ff ff04 	bl	8000e08 <LCD_ShowChar>
		x+=sizey/2;
 8001000:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	4413      	add	r3, r2
 800100e:	81fb      	strh	r3, [r7, #14]
		p++;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3301      	adds	r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e0      	bne.n	8000fe0 <LCD_ShowString+0x18>
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <mypow>:
      函数说明：显示数字
      入口数据：m底数，n指数
      返回值：  无
******************************************************************************/
uint32_t mypow(uint8_t m,uint8_t n)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800103c:	e004      	b.n	8001048 <mypow+0x20>
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	71ba      	strb	r2, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f5      	bne.n	800103e <mypow+0x16>
	return result;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <LCD_ShowIntNum>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	@ 0x24
 8001064:	af04      	add	r7, sp, #16
 8001066:	4604      	mov	r4, r0
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e059      	b.n	8001144 <LCD_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001090:	887c      	ldrh	r4, [r7, #2]
 8001092:	787a      	ldrb	r2, [r7, #1]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3b01      	subs	r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	200a      	movs	r0, #10
 80010a2:	f7ff ffc1 	bl	8001028 <mypow>
 80010a6:	4603      	mov	r3, r0
 80010a8:	fbb4 f1f3 	udiv	r1, r4, r3
 80010ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <LCD_ShowIntNum+0xf8>)
 80010ae:	fba3 2301 	umull	r2, r3, r3, r1
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	1aca      	subs	r2, r1, r3
 80010be:	4613      	mov	r3, r2
 80010c0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d121      	bne.n	800110c <LCD_ShowIntNum+0xac>
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	787b      	ldrb	r3, [r7, #1]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	429a      	cmp	r2, r3
 80010d0:	da1c      	bge.n	800110c <LCD_ShowIntNum+0xac>
		{
			if(temp==0)
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d117      	bne.n	8001108 <LCD_ShowIntNum+0xa8>
			{
				LCD_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	7b7a      	ldrb	r2, [r7, #13]
 80010de:	b292      	uxth	r2, r2
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	4413      	add	r3, r2
 80010ea:	b298      	uxth	r0, r3
 80010ec:	8c3a      	ldrh	r2, [r7, #32]
 80010ee:	88b9      	ldrh	r1, [r7, #4]
 80010f0:	2300      	movs	r3, #0
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	2220      	movs	r2, #32
 8001102:	f7ff fe81 	bl	8000e08 <LCD_ShowChar>
				continue;
 8001106:	e01a      	b.n	800113e <LCD_ShowIntNum+0xde>
			}else enshow=1;
 8001108:	2301      	movs	r3, #1
 800110a:	73bb      	strb	r3, [r7, #14]

		}
	 	LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	b29b      	uxth	r3, r3
 8001110:	7b7a      	ldrb	r2, [r7, #13]
 8001112:	b292      	uxth	r2, r2
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	b29a      	uxth	r2, r3
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	4413      	add	r3, r2
 800111e:	b298      	uxth	r0, r3
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	3330      	adds	r3, #48	@ 0x30
 8001124:	b2da      	uxtb	r2, r3
 8001126:	8c3c      	ldrh	r4, [r7, #32]
 8001128:	88b9      	ldrh	r1, [r7, #4]
 800112a:	2300      	movs	r3, #0
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4623      	mov	r3, r4
 800113a:	f7ff fe65 	bl	8000e08 <LCD_ShowChar>
	for(t=0;t<len;t++)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	787b      	ldrb	r3, [r7, #1]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3a1      	bcc.n	8001090 <LCD_ShowIntNum+0x30>
	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	cccccccd 	.word	0xcccccccd

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	@ 0x50
 8001160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f000 fadf 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f8af 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f7fe ffef 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 800116e:	f000 f9b3 	bl	80014d8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001172:	f000 f959 	bl	8001428 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001176:	2104      	movs	r1, #4
 8001178:	484f      	ldr	r0, [pc, #316]	@ (80012b8 <main+0x15c>)
 800117a:	f001 fa5f 	bl	800263c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800117e:	213c      	movs	r1, #60	@ 0x3c
 8001180:	484e      	ldr	r0, [pc, #312]	@ (80012bc <main+0x160>)
 8001182:	f001 fb9f 	bl	80028c4 <HAL_TIM_Encoder_Start>
  htim1.Instance->CNT = 10000;
 8001186:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <main+0x160>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24
  uint16_t cnt_encoder = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  int period = 50;
 8001194:	2332      	movs	r3, #50	@ 0x32
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  char message[50] = "";
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	222e      	movs	r2, #46	@ 0x2e
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f8a7 	bl	80032f8 <memset>
  HAL_Delay(100);
 80011aa:	2064      	movs	r0, #100	@ 0x64
 80011ac:	f000 fb1c 	bl	80017e8 <HAL_Delay>

  LCD_Init();//LCD初始化
 80011b0:	f7ff f8d8 	bl	8000364 <LCD_Init>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 80011b4:	4b40      	ldr	r3, [pc, #256]	@ (80012b8 <main+0x15c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2232      	movs	r2, #50	@ 0x32
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f000 fb13 	bl	80017e8 <HAL_Delay>

  LCD_Fill(0,0,LCD_W,LCD_H,WHITE);
 80011c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2350      	movs	r3, #80	@ 0x50
 80011ca:	22a0      	movs	r2, #160	@ 0xa0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff f9f4 	bl	80005bc <LCD_Fill>
  LCD_ShowChinese(5, 20, "占空比", RED, WHITE, 32, 0);
 80011d4:	2300      	movs	r3, #0
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2320      	movs	r3, #32
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80011e6:	4a36      	ldr	r2, [pc, #216]	@ (80012c0 <main+0x164>)
 80011e8:	2114      	movs	r1, #20
 80011ea:	2005      	movs	r0, #5
 80011ec:	f7ff fa33 	bl	8000656 <LCD_ShowChinese>
  LCD_ShowString(95,20,":",RED,WHITE,24,0);
 80011f0:	2300      	movs	r3, #0
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2318      	movs	r3, #24
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001202:	4a30      	ldr	r2, [pc, #192]	@ (80012c4 <main+0x168>)
 8001204:	2114      	movs	r1, #20
 8001206:	205f      	movs	r0, #95	@ 0x5f
 8001208:	f7ff fede 	bl	8000fc8 <LCD_ShowString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (cnt_encoder < __HAL_TIM_GET_COUNTER(&htim1))
 800120c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <main+0x160>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	429a      	cmp	r2, r3
 8001216:	d224      	bcs.n	8001262 <main+0x106>
	{
		cnt_encoder = __HAL_TIM_GET_COUNTER(&htim1);
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <main+0x160>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		if(period < 1)
 8001220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001222:	2b00      	cmp	r3, #0
 8001224:	dc06      	bgt.n	8001234 <main+0xd8>
		{
			period = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period);
 800122a:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <main+0x15c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
 8001232:	e006      	b.n	8001242 <main+0xe6>
		}
		else
		{
			period--;
 8001234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001236:	3b01      	subs	r3, #1
 8001238:	63bb      	str	r3, [r7, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period);
 800123a:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <main+0x15c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001240:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		LCD_ShowIntNum(105,20,period,3,RED,WHITE,32);
 8001242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001244:	b29a      	uxth	r2, r3
 8001246:	2320      	movs	r3, #32
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2303      	movs	r3, #3
 8001258:	2114      	movs	r1, #20
 800125a:	2069      	movs	r0, #105	@ 0x69
 800125c:	f7ff ff00 	bl	8001060 <LCD_ShowIntNum>
 8001260:	e7d4      	b.n	800120c <main+0xb0>
	}
	else if(cnt_encoder > __HAL_TIM_GET_COUNTER(&htim1))
 8001262:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <main+0x160>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	429a      	cmp	r2, r3
 800126c:	d9ce      	bls.n	800120c <main+0xb0>
	{
		cnt_encoder = __HAL_TIM_GET_COUNTER(&htim1);
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <main+0x160>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		if(period > 99)
 8001276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001278:	2b63      	cmp	r3, #99	@ 0x63
 800127a:	dd06      	ble.n	800128a <main+0x12e>
		{
			period = 100;
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period);
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <main+0x15c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38
 8001288:	e006      	b.n	8001298 <main+0x13c>
		}
		else
		{
			period++;
 800128a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800128c:	3301      	adds	r3, #1
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period);
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <main+0x15c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		LCD_ShowIntNum(105,20,period,3,RED,WHITE,32);
 8001298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800129a:	b29a      	uxth	r2, r3
 800129c:	2320      	movs	r3, #32
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2303      	movs	r3, #3
 80012ae:	2114      	movs	r1, #20
 80012b0:	2069      	movs	r0, #105	@ 0x69
 80012b2:	f7ff fed5 	bl	8001060 <LCD_ShowIntNum>
	if (cnt_encoder < __HAL_TIM_GET_COUNTER(&htim1))
 80012b6:	e7a9      	b.n	800120c <main+0xb0>
 80012b8:	20000080 	.word	0x20000080
 80012bc:	20000038 	.word	0x20000038
 80012c0:	08003368 	.word	0x08003368
 80012c4:	08003374 	.word	0x08003374

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b090      	sub	sp, #64	@ 0x40
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	2228      	movs	r2, #40	@ 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 f80e 	bl	80032f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001306:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fd0d 	bl	8001d30 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800131c:	f000 f819 	bl	8001352 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001330:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2102      	movs	r1, #2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 ff7a 	bl	8002234 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001346:	f000 f804 	bl	8001352 <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3740      	adds	r7, #64	@ 0x40
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001356:	b672      	cpsid	i
}
 8001358:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135a:	bf00      	nop
 800135c:	e7fd      	b.n	800135a <Error_Handler+0x8>
	...

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f9cc 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f001 ff5e 	bl	80032f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 8001446:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <MX_TIM1_Init+0xac>)
 8001448:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 8001458:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800145c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001480:	230f      	movs	r3, #15
 8001482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 800149c:	f001 f970 	bl	8002780 <HAL_TIM_Encoder_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014a6:	f7ff ff54 	bl	8001352 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM1_Init+0xa8>)
 80014b8:	f001 fec0 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014c2:	f7ff ff46 	bl	8001352 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000038 	.word	0x20000038
 80014d4:	40012c00 	.word	0x40012c00

080014d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	@ 0x38
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <MX_TIM2_Init+0xe4>)
 8001512:	2223      	movs	r2, #35	@ 0x23
 8001514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <MX_TIM2_Init+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800151e:	2263      	movs	r2, #99	@ 0x63
 8001520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <MX_TIM2_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800152e:	4823      	ldr	r0, [pc, #140]	@ (80015bc <MX_TIM2_Init+0xe4>)
 8001530:	f000 ffdc 	bl	80024ec <HAL_TIM_Base_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800153a:	f7ff ff0a 	bl	8001352 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001544:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001548:	4619      	mov	r1, r3
 800154a:	481c      	ldr	r0, [pc, #112]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800154c:	f001 fb0a 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001556:	f7ff fefc 	bl	8001352 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800155a:	4818      	ldr	r0, [pc, #96]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800155c:	f001 f815 	bl	800258a <HAL_TIM_PWM_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001566:	f7ff fef4 	bl	8001352 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001572:	f107 0320 	add.w	r3, r7, #32
 8001576:	4619      	mov	r1, r3
 8001578:	4810      	ldr	r0, [pc, #64]	@ (80015bc <MX_TIM2_Init+0xe4>)
 800157a:	f001 fe5f 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001584:	f7ff fee5 	bl	8001352 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001588:	2360      	movs	r3, #96	@ 0x60
 800158a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2204      	movs	r2, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <MX_TIM2_Init+0xe4>)
 80015a0:	f001 fa1e 	bl	80029e0 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80015aa:	f7ff fed2 	bl	8001352 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <MX_TIM2_Init+0xe4>)
 80015b0:	f000 f862 	bl	8001678 <HAL_TIM_MspPostInit>

}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	@ 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000080 	.word	0x20000080

080015c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <HAL_TIM_Encoder_MspInit+0x74>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d124      	bne.n	800162a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 80015e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_TIM_Encoder_MspInit+0x78>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001610:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_TIM_Encoder_MspInit+0x7c>)
 8001626:	f000 f9e7 	bl	80019f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001650:	d10b      	bne.n	800166a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_TIM_Base_MspInit+0x34>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_TIM_Base_MspInit+0x34>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_TIM_Base_MspInit+0x34>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001696:	d117      	bne.n	80016c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_TIM_MspPostInit+0x58>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <HAL_TIM_MspPostInit+0x58>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_TIM_MspPostInit+0x58>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016b0:	2302      	movs	r3, #2
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <HAL_TIM_MspPostInit+0x5c>)
 80016c4:	f000 f998 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010800 	.word	0x40010800

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fea0 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016de:	490c      	ldr	r1, [pc, #48]	@ (8001710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f4:	4c09      	ldr	r4, [pc, #36]	@ (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f001 fe01 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff fd29 	bl	800115c <main>
  bx lr
 800170a:	4770      	bx	lr
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001714:	08006ab8 	.word	0x08006ab8
  ldr r2, =_sbss
 8001718:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800171c:	200000cc 	.word	0x200000cc

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f92b 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe0e 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f935 	bl	80019de <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f90b 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000018 	.word	0x20000018
 80017ac:	20000014 	.word	0x20000014

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000018 	.word	0x20000018
 80017d0:	200000c8 	.word	0x200000c8

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	@ (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200000c8 	.word	0x200000c8

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffe0 	bl	80017d4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000018 	.word	0x20000018

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff90 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff49 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff5e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff90 	bl	80018e8 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffb0 	bl	800194c <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b08b      	sub	sp, #44	@ 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e169      	b.n	8001ce0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8158 	bne.w	8001cda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a9a      	ldr	r2, [pc, #616]	@ (8001c98 <HAL_GPIO_Init+0x2a0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d05e      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a34:	4a98      	ldr	r2, [pc, #608]	@ (8001c98 <HAL_GPIO_Init+0x2a0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d875      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a3a:	4a98      	ldr	r2, [pc, #608]	@ (8001c9c <HAL_GPIO_Init+0x2a4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d058      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a40:	4a96      	ldr	r2, [pc, #600]	@ (8001c9c <HAL_GPIO_Init+0x2a4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d86f      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a46:	4a96      	ldr	r2, [pc, #600]	@ (8001ca0 <HAL_GPIO_Init+0x2a8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d052      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a4c:	4a94      	ldr	r2, [pc, #592]	@ (8001ca0 <HAL_GPIO_Init+0x2a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d869      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a52:	4a94      	ldr	r2, [pc, #592]	@ (8001ca4 <HAL_GPIO_Init+0x2ac>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d04c      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a58:	4a92      	ldr	r2, [pc, #584]	@ (8001ca4 <HAL_GPIO_Init+0x2ac>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d863      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a5e:	4a92      	ldr	r2, [pc, #584]	@ (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d046      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
 8001a64:	4a90      	ldr	r2, [pc, #576]	@ (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d85d      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d82a      	bhi.n	8001ac4 <HAL_GPIO_Init+0xcc>
 8001a6e:	2b12      	cmp	r3, #18
 8001a70:	d859      	bhi.n	8001b26 <HAL_GPIO_Init+0x12e>
 8001a72:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <HAL_GPIO_Init+0x80>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001af3 	.word	0x08001af3
 8001a7c:	08001acd 	.word	0x08001acd
 8001a80:	08001adf 	.word	0x08001adf
 8001a84:	08001b21 	.word	0x08001b21
 8001a88:	08001b27 	.word	0x08001b27
 8001a8c:	08001b27 	.word	0x08001b27
 8001a90:	08001b27 	.word	0x08001b27
 8001a94:	08001b27 	.word	0x08001b27
 8001a98:	08001b27 	.word	0x08001b27
 8001a9c:	08001b27 	.word	0x08001b27
 8001aa0:	08001b27 	.word	0x08001b27
 8001aa4:	08001b27 	.word	0x08001b27
 8001aa8:	08001b27 	.word	0x08001b27
 8001aac:	08001b27 	.word	0x08001b27
 8001ab0:	08001b27 	.word	0x08001b27
 8001ab4:	08001b27 	.word	0x08001b27
 8001ab8:	08001b27 	.word	0x08001b27
 8001abc:	08001ad5 	.word	0x08001ad5
 8001ac0:	08001ae9 	.word	0x08001ae9
 8001ac4:	4a79      	ldr	r2, [pc, #484]	@ (8001cac <HAL_GPIO_Init+0x2b4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aca:	e02c      	b.n	8001b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e029      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e024      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e01f      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	330c      	adds	r3, #12
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e01a      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001afa:	2304      	movs	r3, #4
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e013      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	611a      	str	r2, [r3, #16]
          break;
 8001b12:	e009      	b.n	8001b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	615a      	str	r2, [r3, #20]
          break;
 8001b1e:	e003      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x130>
          break;
 8001b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2bff      	cmp	r3, #255	@ 0xff
 8001b2c:	d801      	bhi.n	8001b32 <HAL_GPIO_Init+0x13a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	e001      	b.n	8001b36 <HAL_GPIO_Init+0x13e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3304      	adds	r3, #4
 8001b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2bff      	cmp	r3, #255	@ 0xff
 8001b3c:	d802      	bhi.n	8001b44 <HAL_GPIO_Init+0x14c>
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	e002      	b.n	8001b4a <HAL_GPIO_Init+0x152>
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	3b08      	subs	r3, #8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	210f      	movs	r1, #15
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	6a39      	ldr	r1, [r7, #32]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	431a      	orrs	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80b1 	beq.w	8001cda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <HAL_GPIO_Init+0x2b8>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb0 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb0 <HAL_GPIO_Init+0x2b8>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b90:	4a48      	ldr	r2, [pc, #288]	@ (8001cb4 <HAL_GPIO_Init+0x2bc>)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a40      	ldr	r2, [pc, #256]	@ (8001cb8 <HAL_GPIO_Init+0x2c0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_GPIO_Init+0x1ec>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cbc <HAL_GPIO_Init+0x2c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00d      	beq.n	8001be0 <HAL_GPIO_Init+0x1e8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc0 <HAL_GPIO_Init+0x2c8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x1e4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc4 <HAL_GPIO_Init+0x2cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_GPIO_Init+0x1e0>
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e006      	b.n	8001be6 <HAL_GPIO_Init+0x1ee>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e004      	b.n	8001be6 <HAL_GPIO_Init+0x1ee>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x1ee>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_GPIO_Init+0x1ee>
 8001be4:	2300      	movs	r3, #0
 8001be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf6:	492f      	ldr	r1, [pc, #188]	@ (8001cb4 <HAL_GPIO_Init+0x2bc>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	492c      	ldr	r1, [pc, #176]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4928      	ldr	r1, [pc, #160]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4922      	ldr	r1, [pc, #136]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	491e      	ldr	r1, [pc, #120]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4918      	ldr	r1, [pc, #96]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4914      	ldr	r1, [pc, #80]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d021      	beq.n	8001ccc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	490e      	ldr	r1, [pc, #56]	@ (8001cc8 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e021      	b.n	8001cda <HAL_GPIO_Init+0x2e2>
 8001c96:	bf00      	nop
 8001c98:	10320000 	.word	0x10320000
 8001c9c:	10310000 	.word	0x10310000
 8001ca0:	10220000 	.word	0x10220000
 8001ca4:	10210000 	.word	0x10210000
 8001ca8:	10120000 	.word	0x10120000
 8001cac:	10110000 	.word	0x10110000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40011400 	.word	0x40011400
 8001cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4909      	ldr	r1, [pc, #36]	@ (8001cfc <HAL_GPIO_Init+0x304>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f ae8e 	bne.w	8001a0c <HAL_GPIO_Init+0x14>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	372c      	adds	r7, #44	@ 0x2c
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40010400 	.word	0x40010400

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d1c:	e003      	b.n	8001d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	041a      	lsls	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e272      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d50:	4b92      	ldr	r3, [pc, #584]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d00c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d112      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5e>
 8001d68:	4b8c      	ldr	r3, [pc, #560]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b89      	ldr	r3, [pc, #548]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d06c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d168      	bne.n	8001e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e24c      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x76>
 8001d98:	4b80      	ldr	r3, [pc, #512]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x98>
 8001dae:	4b7b      	ldr	r3, [pc, #492]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7a      	ldr	r2, [pc, #488]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b78      	ldr	r3, [pc, #480]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a77      	ldr	r2, [pc, #476]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01d      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0xbc>
 8001dd2:	4b72      	ldr	r3, [pc, #456]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a71      	ldr	r2, [pc, #452]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b6f      	ldr	r3, [pc, #444]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001dec:	4b6b      	ldr	r3, [pc, #428]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b68      	ldr	r3, [pc, #416]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a67      	ldr	r2, [pc, #412]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fce2 	bl	80017d4 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fcde 	bl	80017d4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e200      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe4>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fcce 	bl	80017d4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fcca 	bl	80017d4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1ec      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x10c>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d063      	beq.n	8001f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e76:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x18c>
 8001e82:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x176>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e1c0      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4939      	ldr	r1, [pc, #228]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	e03a      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fc83 	bl	80017d4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fc7f 	bl	80017d4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e1a1      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4927      	ldr	r1, [pc, #156]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fc62 	bl	80017d4 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f14:	f7ff fc5e 	bl	80017d4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e180      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03a      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d019      	beq.n	8001f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fc42 	bl	80017d4 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fc3e 	bl	80017d4 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e160      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 fa9c 	bl	80024b0 <RCC_Delay>
 8001f78:	e01c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff fc28 	bl	80017d4 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff fc24 	bl	80017d4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d908      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e146      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	42420000 	.word	0x42420000
 8001fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	4b92      	ldr	r3, [pc, #584]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e9      	bne.n	8001f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a6 	beq.w	800210e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b88      	ldr	r3, [pc, #544]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a87      	ldr	r2, [pc, #540]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b82      	ldr	r3, [pc, #520]	@ (80021f8 <HAL_RCC_OscConfig+0x4c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x4c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80021f8 <HAL_RCC_OscConfig+0x4c8>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fbe5 	bl	80017d4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fbe1 	bl	80017d4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	@ 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e103      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b75      	ldr	r3, [pc, #468]	@ (80021f8 <HAL_RCC_OscConfig+0x4c8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x312>
 8002034:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e02d      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x334>
 800204a:	4b6a      	ldr	r3, [pc, #424]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a69      	ldr	r2, [pc, #420]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b67      	ldr	r3, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a66      	ldr	r2, [pc, #408]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	e01c      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x356>
 800206c:	4b61      	ldr	r3, [pc, #388]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a60      	ldr	r2, [pc, #384]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	4b5e      	ldr	r3, [pc, #376]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a5d      	ldr	r2, [pc, #372]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	e00b      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002086:	4b5b      	ldr	r3, [pc, #364]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a5a      	ldr	r2, [pc, #360]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	4b58      	ldr	r3, [pc, #352]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a57      	ldr	r2, [pc, #348]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d015      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb95 	bl	80017d4 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fb91 	bl	80017d4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0b1      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ee      	beq.n	80020ae <HAL_RCC_OscConfig+0x37e>
 80020d0:	e014      	b.n	80020fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fb7f 	bl	80017d4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fb7b 	bl	80017d4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e09b      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b3c      	ldr	r3, [pc, #240]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a3b      	ldr	r2, [pc, #236]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8087 	beq.w	8002226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d061      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d146      	bne.n	80021ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <HAL_RCC_OscConfig+0x4cc>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fb4f 	bl	80017d4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fb4b 	bl	80017d4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e06d      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002160:	d108      	bne.n	8002174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002162:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4921      	ldr	r1, [pc, #132]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a19      	ldr	r1, [r3, #32]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	430b      	orrs	r3, r1
 8002186:	491b      	ldr	r1, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x4cc>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff fb1f 	bl	80017d4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff fb1b 	bl	80017d4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x46a>
 80021b8:	e035      	b.n	8002226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HAL_RCC_OscConfig+0x4cc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fb08 	bl	80017d4 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff fb04 	bl	80017d4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e026      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x498>
 80021e6:	e01e      	b.n	8002226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e019      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_OscConfig+0x500>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0d0      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b6a      	ldr	r3, [pc, #424]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b67      	ldr	r3, [pc, #412]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4965      	ldr	r1, [pc, #404]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800229a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a52      	ldr	r2, [pc, #328]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d040      	beq.n	8002354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e073      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4936      	ldr	r1, [pc, #216]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7ff fa56 	bl	80017d4 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7ff fa52 	bl	80017d4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e053      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d210      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4922      	ldr	r1, [pc, #136]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490a      	ldr	r1, [pc, #40]	@ (80023fc <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <HAL_RCC_ClockConfig+0x1cc>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1d0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f9b4 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08006a8c 	.word	0x08006a8c
 8002400:	20000010 	.word	0x20000010
 8002404:	20000014 	.word	0x20000014

08002408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCC_GetSysClockFreq+0x94>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b04      	cmp	r3, #4
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x30>
 8002432:	2b08      	cmp	r3, #8
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x36>
 8002436:	e027      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	e027      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	0c9b      	lsrs	r3, r3, #18
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d010      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002456:	4b11      	ldr	r3, [pc, #68]	@ (800249c <HAL_RCC_GetSysClockFreq+0x94>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0c5b      	lsrs	r3, r3, #17
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e004      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	613b      	str	r3, [r7, #16]
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800248a:	613b      	str	r3, [r7, #16]
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	693b      	ldr	r3, [r7, #16]
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	007a1200 	.word	0x007a1200
 80024a4:	08006a9c 	.word	0x08006a9c
 80024a8:	08006aac 	.word	0x08006aac
 80024ac:	003d0900 	.word	0x003d0900

080024b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <RCC_Delay+0x34>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <RCC_Delay+0x38>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0a5b      	lsrs	r3, r3, #9
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024cc:	bf00      	nop
  }
  while (Delay --);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	60fa      	str	r2, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <RCC_Delay+0x1c>
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000010 	.word	0x20000010
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f894 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 fbe2 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e041      	b.n	8002620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f839 	bl	8002628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 fb93 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
	...

0800263c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <HAL_TIM_PWM_Start+0x24>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e022      	b.n	80026a6 <HAL_TIM_PWM_Start+0x6a>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d109      	bne.n	800267a <HAL_TIM_PWM_Start+0x3e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e015      	b.n	80026a6 <HAL_TIM_PWM_Start+0x6a>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d109      	bne.n	8002694 <HAL_TIM_PWM_Start+0x58>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e008      	b.n	80026a6 <HAL_TIM_PWM_Start+0x6a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e05e      	b.n	800276c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0x82>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026bc:	e013      	b.n	80026e6 <HAL_TIM_PWM_Start+0xaa>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_PWM_Start+0x92>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026cc:	e00b      	b.n	80026e6 <HAL_TIM_PWM_Start+0xaa>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start+0xa2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026dc:	e003      	b.n	80026e6 <HAL_TIM_PWM_Start+0xaa>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fd80 	bl	80031f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_TIM_PWM_Start+0x138>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d107      	bne.n	800270e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_TIM_PWM_Start+0x138>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_TIM_PWM_Start+0xfa>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002720:	d009      	beq.n	8002736 <HAL_TIM_PWM_Start+0xfa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <HAL_TIM_PWM_Start+0x13c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_TIM_PWM_Start+0xfa>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a12      	ldr	r2, [pc, #72]	@ (800277c <HAL_TIM_PWM_Start+0x140>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d111      	bne.n	800275a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d010      	beq.n	800276a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	e007      	b.n	800276a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e093      	b.n	80028bc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7fe ff09 	bl	80015c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027c4:	f023 0307 	bic.w	r3, r3, #7
 80027c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f000 fa8d 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	4313      	orrs	r3, r2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002820:	f023 030c 	bic.w	r3, r3, #12
 8002824:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800282c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4313      	orrs	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	011a      	lsls	r2, r3, #4
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	031b      	lsls	r3, r3, #12
 8002850:	4313      	orrs	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800285e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4313      	orrs	r3, r2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80028ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d110      	bne.n	8002916 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80028fa:	7b7b      	ldrb	r3, [r7, #13]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e069      	b.n	80029d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002914:	e031      	b.n	800297a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d110      	bne.n	800293e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002922:	7b3b      	ldrb	r3, [r7, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e055      	b.n	80029d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800293c:	e01d      	b.n	800297a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d108      	bne.n	8002956 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002944:	7bbb      	ldrb	r3, [r7, #14]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800294a:	7b7b      	ldrb	r3, [r7, #13]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002950:	7b3b      	ldrb	r3, [r7, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e03e      	b.n	80029d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_TIM_Encoder_Start+0xc4>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d008      	beq.n	8002998 <HAL_TIM_Encoder_Start+0xd4>
 8002986:	e00f      	b.n	80029a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc2f 	bl	80031f4 <TIM_CCxChannelCmd>
      break;
 8002996:	e016      	b.n	80029c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2201      	movs	r2, #1
 800299e:	2104      	movs	r1, #4
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fc27 	bl	80031f4 <TIM_CCxChannelCmd>
      break;
 80029a6:	e00e      	b.n	80029c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fc1f 	bl	80031f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fc18 	bl	80031f4 <TIM_CCxChannelCmd>
      break;
 80029c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0ae      	b.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	f200 809f 	bhi.w	8002b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a49 	.word	0x08002a49
 8002a18:	08002b4d 	.word	0x08002b4d
 8002a1c:	08002b4d 	.word	0x08002b4d
 8002a20:	08002b4d 	.word	0x08002b4d
 8002a24:	08002a89 	.word	0x08002a89
 8002a28:	08002b4d 	.word	0x08002b4d
 8002a2c:	08002b4d 	.word	0x08002b4d
 8002a30:	08002b4d 	.word	0x08002b4d
 8002a34:	08002acb 	.word	0x08002acb
 8002a38:	08002b4d 	.word	0x08002b4d
 8002a3c:	08002b4d 	.word	0x08002b4d
 8002a40:	08002b4d 	.word	0x08002b4d
 8002a44:	08002b0b 	.word	0x08002b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f9b2 	bl	8002db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0208 	orr.w	r2, r2, #8
 8002a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6999      	ldr	r1, [r3, #24]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	619a      	str	r2, [r3, #24]
      break;
 8002a86:	e064      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f9f8 	bl	8002e84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6999      	ldr	r1, [r3, #24]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	021a      	lsls	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	619a      	str	r2, [r3, #24]
      break;
 8002ac8:	e043      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fa41 	bl	8002f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0208 	orr.w	r2, r2, #8
 8002ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0204 	bic.w	r2, r2, #4
 8002af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69d9      	ldr	r1, [r3, #28]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
      break;
 8002b08:	e023      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fa8b 	bl	800302c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69da      	ldr	r2, [r3, #28]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69d9      	ldr	r1, [r3, #28]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	61da      	str	r2, [r3, #28]
      break;
 8002b4a:	e002      	b.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIM_ConfigClockSource+0x1c>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0b4      	b.n	8002cea <HAL_TIM_ConfigClockSource+0x186>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb8:	d03e      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0xd4>
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bbe:	f200 8087 	bhi.w	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc6:	f000 8086 	beq.w	8002cd6 <HAL_TIM_ConfigClockSource+0x172>
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bce:	d87f      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b70      	cmp	r3, #112	@ 0x70
 8002bd2:	d01a      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0xa6>
 8002bd4:	2b70      	cmp	r3, #112	@ 0x70
 8002bd6:	d87b      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b60      	cmp	r3, #96	@ 0x60
 8002bda:	d050      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x11a>
 8002bdc:	2b60      	cmp	r3, #96	@ 0x60
 8002bde:	d877      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be0:	2b50      	cmp	r3, #80	@ 0x50
 8002be2:	d03c      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xfa>
 8002be4:	2b50      	cmp	r3, #80	@ 0x50
 8002be6:	d873      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	d058      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x13a>
 8002bec:	2b40      	cmp	r3, #64	@ 0x40
 8002bee:	d86f      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf0:	2b30      	cmp	r3, #48	@ 0x30
 8002bf2:	d064      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	2b30      	cmp	r3, #48	@ 0x30
 8002bf6:	d86b      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d060      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d867      	bhi.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d05a      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0x15a>
 8002c08:	e062      	b.n	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	f000 facc 	bl	80031b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	609a      	str	r2, [r3, #8]
      break;
 8002c36:	e04f      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c48:	f000 fab5 	bl	80031b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c5a:	609a      	str	r2, [r3, #8]
      break;
 8002c5c:	e03c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f000 fa2c 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2150      	movs	r1, #80	@ 0x50
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa83 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e02c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f000 fa4a 	bl	8003124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2160      	movs	r1, #96	@ 0x60
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fa73 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e01c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	461a      	mov	r2, r3
 8002cac:	f000 fa0c 	bl	80030c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2140      	movs	r1, #64	@ 0x40
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa63 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002cbc:	e00c      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 fa5a 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002cce:	e003      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd4:	e000      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a29      	ldr	r2, [pc, #164]	@ (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d007      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a26      	ldr	r2, [pc, #152]	@ (8002db0 <TIM_Base_SetConfig+0xbc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <TIM_Base_SetConfig+0x30>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a25      	ldr	r2, [pc, #148]	@ (8002db4 <TIM_Base_SetConfig+0xc0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d108      	bne.n	8002d36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1c      	ldr	r2, [pc, #112]	@ (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a19      	ldr	r2, [pc, #100]	@ (8002db0 <TIM_Base_SetConfig+0xbc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <TIM_Base_SetConfig+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <TIM_Base_SetConfig+0xb8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	615a      	str	r2, [r3, #20]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800

08002db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 0201 	bic.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0302 	bic.w	r3, r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10c      	bne.n	8002e2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0308 	bic.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <TIM_OC1_SetConfig+0xc8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d111      	bne.n	8002e5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f023 0210 	bic.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0320 	bic.w	r3, r3, #32
 8002ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d10d      	bne.n	8002f00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002efe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <TIM_OC2_SetConfig+0xd0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d113      	bne.n	8002f30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10d      	bne.n	8002fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	@ (8003028 <TIM_OC3_SetConfig+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00

0800302c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	031b      	lsls	r3, r3, #12
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a0f      	ldr	r2, [pc, #60]	@ (80030c4 <TIM_OC4_SetConfig+0x98>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0201 	bic.w	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 030a 	bic.w	r3, r3, #10
 8003104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f023 0210 	bic.w	r2, r3, #16
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800314e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	031b      	lsls	r3, r3, #12
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003160:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	f043 0307 	orr.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	021a      	lsls	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	609a      	str	r2, [r3, #8]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2201      	movs	r2, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e046      	b.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d009      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a12      	ldr	r2, [pc, #72]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a10      	ldr	r2, [pc, #64]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10c      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <memset>:
 80032f8:	4603      	mov	r3, r0
 80032fa:	4402      	add	r2, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	f803 1b01 	strb.w	r1, [r3], #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4d0c      	ldr	r5, [pc, #48]	@ (8003340 <__libc_init_array+0x38>)
 800330e:	4c0d      	ldr	r4, [pc, #52]	@ (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	f000 f81a 	bl	8003350 <_init>
 800331c:	2600      	movs	r6, #0
 800331e:	4d0a      	ldr	r5, [pc, #40]	@ (8003348 <__libc_init_array+0x40>)
 8003320:	4c0a      	ldr	r4, [pc, #40]	@ (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	08006ab0 	.word	0x08006ab0
 8003344:	08006ab0 	.word	0x08006ab0
 8003348:	08006ab0 	.word	0x08006ab0
 800334c:	08006ab4 	.word	0x08006ab4

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
